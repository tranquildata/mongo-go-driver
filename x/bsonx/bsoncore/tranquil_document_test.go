package bsoncore

import (
	"bytes"
	"testing"
)

//the byte form of: Document(111){bson.Element{[embedded document]"q": {"_id": {"$oid":"627573696e6573732d2d6964"}}} bson.Element{[embedded document]"u": {"$setOnInsert": {"_id": {"$oid":"627573696e6573732d2d6964"},"sequence_value": {"$numberInt":"0"}}}} bson.Element{[boolean]"multi": false} bson.Element{[boolean]"upsert": true} }
var updateDoc []byte = []byte{0x6f, 0x0, 0x0, 0x0, 0x3, 0x71, 0x0, 0x16, 0x0, 0x0, 0x0, 0x7, 0x5f, 0x69, 0x64, 0x0, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2d, 0x2d, 0x69, 0x64, 0x0, 0x3, 0x75, 0x0, 0x3d, 0x0, 0x0, 0x0, 0x3, 0x24, 0x73, 0x65, 0x74, 0x4f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x7, 0x5f, 0x69, 0x64, 0x0, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2d, 0x2d, 0x69, 0x64, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x0, 0x0, 0x8, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x0, 0x1, 0x0}

func Test_thatLookupRecursiveFindFirstFindsFirst(t *testing.T) {
	testDoc := Document(updateDoc)
	val, err := testDoc.LookupRecursiveReturnFirst("_id")
	if err != nil {
		t.Errorf("Unexpected error: %s", err.Error())
	}
	if len(val.Data) == 0 {
		t.Error("Empty value")
	}
}

func Test_thatLookupFindAllFinsAll(t *testing.T) {
	testDoc := Document(updateDoc)
	vals, err := testDoc.LookupAllRecursive("_id")
	if err != nil {
		t.Errorf("Unexpected error: %s", err.Error())
	}
	if len(vals) < 2 {
		t.Errorf("Incorrect number of results")
	}
	for _, v := range vals {
		if !bytes.Equal(v.Data, vals[0].Data) {
			t.Error("Not all vals equal")
		}
	}
}
